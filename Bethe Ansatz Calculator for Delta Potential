# -*- coding: utf-8 -*-
"""
Created on Sun Nov 20 21:31:20 2022

@author: Darren
"""

import numpy as np
from scipy import optimize
import matplotlib.pyplot as plt

L=5
densities = np.linspace(0, 4, 21)
#Number of particles
#N = 21
#Size of the box
#L = 42
# density
#dens= N/L


#the integers/quantum numbers
def Is(N):
    if N%2 == 0:
        arr1 = np.linspace(1/2, (N-1)/2, int(N/2))
        arr2 = np.negative(np.flip(np.linspace(1/2, (N-1)/2, int(N/2))))
        arr = np.concatenate((arr2, arr1))
    else:
        arr1 = np.linspace(0, (N-1)/2, int((N+1)/2))
        arr2 = np.negative(np.flip(np.linspace(1, (N-1)/2, int(N/2))))
        arr = np.concatenate((arr2, arr1))
    return arr


#Phase shift (inverse square g/r^2)
def θ(x):
    if λ!=0:
        p = -2*np.arctan(x/λ)
    else:
        if x>0:
            p = np.pi
        else:
            p= -np.pi
    return p


#Bethe ansatz equations
def BAeqs(x):
    arr =[]
    #for k in c:
    eqs = []
    for i in range(N):
        sums=0
        for j in range(N):
            if j!=i:
                sums += θ(x[i]-x[j])/L
        eqs.append(x[i]-2*np.pi/L * Is(N)[i] - sums)
    arr.append(eqs)
    return arr

#initial trial
#the solved k's
#k = optimize.newton_krylov(BAeqs, init, iter=40)
#print(k)

#Total energy
def energy(p):
    return 0.5*np.sum(np.square(p))

#Total energy
def momentum(p):
    return np.sum(p)

#The strength
#c = np.linspace(-2, 2, 10)
#c = 1
#print(energy(k))


plt.figure(dpi=500)
plt.xlabel('Number Density d')
plt.ylabel('The Energy Density Of the System e₀')
plt.title('Bethe Ansatz for Delta Potential')

#The interacting strength
#g=np.linspace(0, 1, 20)
e0 = []
λs = np.linspace(0.5, 2, 10)
for i in λs:
    arr = []
    for j in range(np.size(densities)):
        N = int(densities[j] * L)
        λ= i
        init = 2*np.pi*Is(N)/L
        if N!=0:
            k = optimize.newton_krylov(BAeqs, init, iter=100)
        else:
            k=0
        enr = energy(k)/10
        mom = momentum(k)
        arr.append(enr)
    plt.plot(densities, arr, ms=1, label = "λ=%g"%i)
    e0.append(arr)

plt.grid()
plt.legend()
plt.show()
